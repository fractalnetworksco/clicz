import argparse

import pytest
from clicz import CLICZ, cli_method


class TestController:
    PLUGIN_NAME = "test"

    @cli_method
    def say_hi_autogen_help(self, name: str, fav_color: str = "green"):
        """This is a description of the method.
        ---
        Args:
            name: Name to say hello to
            fav_color: Your favorite color
        """
        TestController.called = True
        TestController.args = [name]


class TestControllerIncompleteDocstring(TestController):
    @cli_method
    def say_hi_incomplete_docstring(self, name: str, fav_color: str = "green"):
        """\
        ---
        Args:
            badarg: yea
        """
        self.called = True
        self.args = [name]


class TestControllerNoDocstring(TestController):
    @cli_method
    def say_hi_no_docstring(self, name, fav_color="green"):
        self.called = True
        self.args = [name, fav_color]


class TestControllerStaticMethod(TestController):
    @staticmethod
    @cli_method
    def say_hi_static(name):
        """static metod
        ---
        Args:
            name: name arg
        """
        return name


class TestControllerMalformedDocstring(TestController):
    @cli_method
    def say_hi_malformed_docstring(self, name, fav_color="green"):
        """
        ---
        Args:
            Broken
        - Malformed docstring
        """
        self.called = True
        self.args = [name, fav_color]


class TestControllerMissingArgs(TestController):
    @cli_method
    def say_hi_missing_arg_key(self, name):
        """
        Valid yaml but not allowed.
        ---
        """
        pass


class TestControllerUnregistered(TestController):
    def say_hi_unregistered(self, name):
        """unregistered method
        ---
        Args:
            name: name arg
        """
        return name


class TestDefaultsController(TestController):
    @cli_method
    def default(self, name: str, age: int, color: str = "green"):
        """something cool
        ---
        Args:
            name: string
            age: int
            color: str
        """
        TestDefaultsController.args = [name, age, color]

    default.clicz_aliases = ["default"]
    default.clicz_defaults = {"name": "mo", "age": 99}


def test_cli():
    """
    Test invocation calls method with args
    """
    cli = CLICZ(autodiscover=False)
    cli.register_controller(TestController)

    # Make sure we can call a method that has ArgParser help autogenerated
    argv = ["notectl", "test", "say_hi_autogen_help", "Mo"]
    cli.dispatch(argv)
    assert TestController.called == True
    assert "Mo" in TestController.args

    # # Make sure ArgParser help is generated properly
    # argv = ['notectl', 'test', 'say_hi_autogen_help', '-h']
    # cli.dispatch(argv)


def test_cli_incomplete_docstring():
    cli = CLICZ(autodiscover=False)

    # Make sure a useful error is reported when docstring is YAML
    # but doesn't match method's argspec
    with pytest.raises(Exception) as execinfo:
        cli.register_controller(TestControllerIncompleteDocstring)
    exception_str = str(execinfo)
    assert "missing args:" in exception_str
    assert "fav_color" in exception_str
    assert "name" in exception_str


def test_cli_no_docstring():
    cli = CLICZ(autodiscover=False)

    # Make sure calling a method without a docstring raises
    with pytest.raises(Exception) as execinfo:
        cli.register_controller(TestControllerNoDocstring)
    assert "Docstrings are required" in str(execinfo)


def test_cli_static_method():
    cli = CLICZ(autodiscover=False)
    cli.register_controller(TestControllerStaticMethod)
    # Make sure we can call static methods
    argv = ["notectl", "test", "say_hi_static", "Mo"]
    result = cli.dispatch(argv)
    assert result == "Mo"


def test_cli_unregistred_raises():
    cli = CLICZ(autodiscover=False)
    cli.register_controller(TestControllerUnregistered)
    # Make sure calling an unregistered method raises
    with pytest.raises(SystemExit) as execinfo:
        argv = ["notectl", "test", "say_hi_unregistsred", "Mo"]
        cli.dispatch(argv)


def test_cli_malformed_docstring():
    cli = CLICZ(autodiscover=False)
    with pytest.raises(Exception) as execinfo:
        cli.register_controller(TestControllerMalformedDocstring)
    assert "Unable to parse docstring; not valid YAML." in str(execinfo)


def test_cli_missing_arg_key():
    cli = CLICZ(autodiscover=False)
    # Docstring is valid YAML but missing "Arg" key
    with pytest.raises(Exception) as execinfo:
        cli.register_controller(TestControllerMissingArgs)
    assert "Docstring YAML missing Args key." in str(execinfo)


def test_cli_defaults():
    cli = CLICZ(autodiscover=False)
    cli.register_controller(TestDefaultsController)
    argv = ["notectl", "default"]
    cli.dispatch(argv)
    assert TestDefaultsController.args == ["mo", 99, "green"]


def test_cli_no_args_prints_help(capsys):
    with pytest.raises(SystemExit) as pytest_exception:
        cli = CLICZ(autodiscover=False)
        argv = [
            "notectl",
        ]
        cli.dispatch(argv)
    assert pytest_exception.type == SystemExit
    assert pytest_exception.value.code == 0

    captured = capsys.readouterr()
    assert "usage: " in captured.out
